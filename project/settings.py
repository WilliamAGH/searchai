# pyright: reportMissingImports=false
"""
Django settings for project app.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
import warnings
from pathlib import Path

from dotenv import load_dotenv

# Build paths inside the app like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables from .env at project root
load_dotenv(BASE_DIR / ".env")


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = "django-insecure-vszkevrb2_f(+1hu1_ioq%mwg!h#w!if#ucg83x6wwq_s(&e5j"
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY')

if not SECRET_KEY:
    raise ValueError("No DJANGO_SECRET_KEY set for Django application. Please set it in your environment variables.")

# SECURITY WARNING: don't run with debug turned on in production!
# It's recommended to set DEBUG from an environment variable as well, e.g.,
# DEBUG = os.environ.get('DJANGO_DEBUG', 'False') == 'True'
DEBUG = True

# Define the base list of host specifiers to ensure consistency
# between ALLOWED_HOSTS and CSRF_TRUSTED_ORIGINS.
# Using dict.fromkeys to ensure all entries are unique.
_BASE_HOST_SPECIFIERS = list(dict.fromkeys([
    "0.0.0.0", # Allows all IPv4 addresses; use with caution and ideally be more specific in production.
    ".claude", # Wildcard for subdomains of claude
    "127.0.0.1",
    "localhost",
    "searchai.popos-sf1.com",
    "dev.search-ai.io", # Specific subdomain
    ".dev.search-ai.io", # Wildcard for subdomains of dev.search-ai.io
    "search-ai.io",
    ".search-ai.io", # Wildcard for subdomains of search-ai.io
    "searchai.popos-sf7.com",
    "prod.search-ai.io", # Specific subdomain
    "searchai.iocloudhost.net",
    "iocloudhost.net",
]))

ALLOWED_HOSTS = _BASE_HOST_SPECIFIERS

# Derive CSRF_TRUSTED_ORIGINS from _BASE_HOST_SPECIFIERS
# This ensures that if a host is allowed, its corresponding secure origin is trusted for CSRF.
_generated_csrf_origins = set()
for specifier in _BASE_HOST_SPECIFIERS:
    if specifier == "localhost":
        _generated_csrf_origins.add("http://localhost") # Common for local dev
        _generated_csrf_origins.add("https://localhost")
    elif specifier == "127.0.0.1":
        _generated_csrf_origins.add("http://127.0.0.1") # Common for local dev
        _generated_csrf_origins.add("https://127.0.0.1")
    elif specifier == "0.0.0.0":
        # '0.0.0.0' is not a valid hostname for an Origin header.
        # It's a listen address for servers.
        continue
    elif specifier.startswith("."):
        # For a wildcard ALLOWED_HOSTS entry like ".example.com",
        # we trust the base domain "https://example.com" for CSRF.
        # Django's CSRF check matches the Origin header exactly,
        # it doesn't interpret wildcards in CSRF_TRUSTED_ORIGINS in the same way as ALLOWED_HOSTS.
        # Trusting the base domain is a common pattern.
        # If specific subdomains (e.g., https://sub.example.com) also need to be trusted,
        # they should ideally be listed explicitly in _BASE_HOST_SPECIFIERS (e.g., "sub.example.com").
        _generated_csrf_origins.add(f"https://{specifier[1:]}")
    else:
        # For a specific host like "example.com", trust "https://example.com"
        _generated_csrf_origins.add(f"https://{specifier}")

CSRF_TRUSTED_ORIGINS = list(sorted(list(_generated_csrf_origins))) # Sorted for deterministic output


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "app.apps.CrewaiexperimentalConfig",
    "agent.apps.AgentConfig",
    "django_htmx",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django_htmx.middleware.HtmxMiddleware",  # Add HtmxMiddleware
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "project.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "project.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    },
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / "staticfiles"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# External Web‚ÄêSearch API configuration
SEARCH_API_KEY = os.environ.get("SEARCH_API_KEY")
SEARCH_API_ENDPOINT = os.environ.get(
    "SEARCH_API_ENDPOINT",
    "https://api.bing.microsoft.com/v7.0/search",
)

# Serper.dev search configuration
SERPER_API_KEY = os.environ.get("SERPER_API_KEY")
SERPER_SEARCH_URL = os.environ.get(
    "SERPER_SEARCH_URL",
    "https://google.serper.dev/search",
)

# Silence Pydantic type warnings
warnings.filterwarnings(
    "ignore",
    message=r".*is not a Python type.*",
    category=UserWarning,
    module=r"pydantic\._internal\._generate_schema",
)

# Configure logging to suppress Pydantic internals and control crewai_tools verbosity
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
        },
    },
    "loggers": {
        "pydantic": {
            "handlers": ["console"],
            "level": "ERROR",
            "propagate": False,
        },
        "crewai_tools": {
            "handlers": ["console"],
            "level": "WARNING",
            "propagate": False,
        },
    },
}
