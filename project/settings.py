# pyright: reportMissingImports=false
"""
Django settings for project app.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
import sys
import warnings
from pathlib import Path

from django.core.management.utils import get_random_secret_key
from dotenv import load_dotenv

# Build paths inside the app like this: BASE_DIR / 'subdir'
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables from .env at project root
load_dotenv(BASE_DIR / ".env")


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("DJANGO_SECRET_KEY")
if not SECRET_KEY:
    SECRET_KEY = get_random_secret_key()
    warnings.warn(
        "DJANGO_SECRET_KEY not set – a random key has been generated "
        "for this run. Do NOT use this autogenerated key in production. "
        "Set the DJANGO_SECRET_KEY environment variable for production deployments.",
        RuntimeWarning,
        stacklevel=2,
    )

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG is False by default; set DEBUG=True in your .env file or environment for local development (truthy values: 'true','1','t','y','yes').
DEBUG = os.environ.get("DEBUG", "False").lower() in ("true", "1", "t", "y", "yes")

RUNSERVER = len(sys.argv) > 1 and sys.argv[1] == "runserver"

# Define the base list of host specifiers to ensure consistency
# between ALLOWED_HOSTS and CSRF_TRUSTED_ORIGINS
# Using dict.fromkeys to ensure all entries are unique
_BASE_HOST_SPECIFIERS = list(dict.fromkeys([
    "0.0.0.0", # Allows all IPv4 addresses
    "127.0.0.1",
    "localhost",
    "searchai.popos-sf1.com",
    "dev.search-ai.io",
    ".dev.search-ai.io",
    "search-ai.io",
    ".search-ai.io",
    "searchai.popos-sf7.com",
    "prod.search-ai.io",
    "searchai.iocloudhost.net",
    "iocloudhost.net",
]))

ALLOWED_HOSTS = _BASE_HOST_SPECIFIERS

# Derive CSRF_TRUSTED_ORIGINS from _BASE_HOST_SPECIFIERS
# To ensure that if a host is allowed, its corresponding secure origin is trusted for CSRF
_generated_csrf_origins = set()
for specifier in _BASE_HOST_SPECIFIERS:
    if specifier == "localhost":
        _generated_csrf_origins.add("http://localhost")
        _generated_csrf_origins.add("https://localhost")
    elif specifier == "127.0.0.1":
        _generated_csrf_origins.add("http://127.0.0.1")
        _generated_csrf_origins.add("https://127.0.0.1")
    elif specifier == "0.0.0.0":
        # doing this since '0.0.0.0' is not a valid hostname for an Origin header
        # It's a listen address for servers
        continue
    elif specifier.startswith("."):
        # For a wildcard ALLOWED_HOSTS entry we trust the base domain for CSRF
        # Django's CSRF check matches the Origin header exactly,
        # it doesn't interpret wildcards in CSRF_TRUSTED_ORIGINS in the same way as ALLOWED_HOSTS.
        _generated_csrf_origins.add(f"https://{specifier[1:]}")
    else:
        _generated_csrf_origins.add(f"https://{specifier}")

CSRF_TRUSTED_ORIGINS = sorted(_generated_csrf_origins)

# Honor the 'X-Forwarded-Proto' header for SSL detection when behind a proxy
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

# Security Settings for Production (when DEBUG is False and not running dev server)
if not DEBUG and not RUNSERVER:
    SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SECURE_HSTS_SECONDS = 2592000  # 30 days
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = False
    SECURE_CONTENT_TYPE_NOSNIFF = True
    # SESSION_COOKIE_HTTPONLY is True by default
    # X_FRAME_OPTIONS is 'DENY' by default

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "app.apps.CrewaiexperimentalConfig",
    "agent.apps.AgentConfig",
    "django_htmx",
]

MIDDLEWARE = [
    "project.middleware.forwarded.ForwardedHeaderMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django_htmx.middleware.HtmxMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "project.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "project.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    },
}

# Enable persistent DB connections and wrap requests in transactions
DATABASES["default"]["CONN_MAX_AGE"] = int(os.environ.get("CONN_MAX_AGE", 60))
DATABASES["default"]["ATOMIC_REQUESTS"] = True

# Security headers and cookie settings for security and resilience
SECURE_BROWSER_XSS_FILTER = True
X_FRAME_OPTIONS = "DENY"
SESSION_COOKIE_HTTPONLY = True
CSRF_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = "Lax"
CSRF_COOKIE_SAMESITE = "Lax"

# Error reporting: send emails to admins on unhandled exceptions
ADMINS = [
    (os.environ.get("ADMIN_NAME", "Admin"), os.environ.get("ADMIN_EMAIL", "")),
]
MANAGERS = ADMINS
SERVER_EMAIL = os.environ.get("SERVER_EMAIL", "server@example.com")
EMAIL_BACKEND = os.environ.get("EMAIL_BACKEND", "django.core.mail.backends.smtp.EmailBackend")
EMAIL_HOST = os.environ.get("EMAIL_HOST", "localhost")
EMAIL_PORT = int(os.environ.get("EMAIL_PORT", 25))
EMAIL_HOST_USER = os.environ.get("EMAIL_HOST_USER", "")
EMAIL_HOST_PASSWORD = os.environ.get("EMAIL_HOST_PASSWORD", "")
EMAIL_USE_TLS = os.environ.get("EMAIL_USE_TLS", "False").lower() in ("true", "1", "t", "y", "yes")

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / "staticfiles"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# External Web‐Search API configuration
SEARCH_API_KEY = os.environ.get("SEARCH_API_KEY")
SEARCH_API_ENDPOINT = os.environ.get(
    "SEARCH_API_ENDPOINT",
    "https://api.bing.microsoft.com/v7.0/search",
)

# Serper.dev search configuration
SERPER_API_KEY = os.environ.get("SERPER_API_KEY")
SERPER_SEARCH_URL = os.environ.get(
    "SERPER_SEARCH_URL",
    "https://google.serper.dev/search",
)

# Silence Pydantic type warnings
warnings.filterwarnings(
    "ignore",
    message=r".*is not a Python type.*",
    category=UserWarning,
    module=r"pydantic\._internal\._generate_schema",
)

# Silence all SyntaxWarnings to prevent invalid escape sequence warnings
warnings.filterwarnings("ignore", category=SyntaxWarning)

# Additionally provide specific module filters for clarity
warnings.filterwarnings("ignore", category=SyntaxWarning, module="pysbd")
warnings.filterwarnings("ignore", category=SyntaxWarning, module="qdrant_client")

# Configure logging to suppress Pydantic internals and control crewai_tools verbosity
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
        },
        "mail_admins": {
            "level": "ERROR",
            "class": "django.utils.log.AdminEmailHandler",
        },
    },
    "loggers": {
        "pydantic": {
            "handlers": ["console"],
            "level": "ERROR",
            "propagate": False,
        },
        "crewai_tools": {
            "handlers": ["console"],
            "level": "WARNING",
            "propagate": False,
        },
        "django.request": {
            "handlers": ["mail_admins", "console"],
            "level": "ERROR",
            "propagate": False,
        },
    },
}
